# =============================================================================
# 🚀 AVIATION WEATHER KAFKA PRODUCER 설정
# 전 세계 항공 기상 데이터를 자동 수집하여 Kafka로 전송하는 애플리케이션
# =============================================================================

# ===== 📱 애플리케이션 기본 정보 =====
spring.application.name=aviation-weather-producer

# ===== 📡 KAFKA 연결 설정 =====
# 카프카 클러스터 주소 (여러분의 Kafka 서버 주소로 변경하세요)
spring.kafka.bootstrap-servers=13.209.157.53:9092,15.164.111.153:9092,3.34.32.69:9092

# 데이터 직렬화 방식 (JSON 문자열로 전송)
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

# ===== 🛡️ KAFKA 안정성 및 성능 설정 =====
# 모든 복제본에서 확인 후 응답 (데이터 손실 방지)
spring.kafka.producer.acks=all

# 전송 실패시 재시도 횟수
spring.kafka.producer.retries=3

# 배치 크기 (16KB씩 묶어서 전송하여 성능 향상)
spring.kafka.producer.batch-size=16384

# 배치 대기 시간 (1ms 후 전송, 처리량 향상)
spring.kafka.producer.linger-ms=1

# 프로듀서 메모리 버퍼 크기 (32MB)
spring.kafka.producer.buffer-memory=33554432

# 데이터 압축 (네트워크 사용량 절약)
spring.kafka.producer.compression-type=gzip

# 중복 전송 방지 (정확히 한 번만 전송 보장)
spring.kafka.producer.enable-idempotence=true

# 요청 타임아웃 (30초)
spring.kafka.producer.request-timeout-ms=30000

# 전체 전송 타임아웃 (2분)
spring.kafka.producer.delivery-timeout-ms=120000

# ===== 📊 JSON 데이터 처리 설정 =====
# 날짜를 타임스탬프 숫자가 아닌 문자열로 변환 (읽기 쉽게)
spring.jackson.serialization.write-dates-as-timestamps=false

# 한국 시간대 사용
spring.jackson.time-zone=Asia/Seoul

# null 값은 JSON에 포함하지 않음 (데이터 크기 절약)
spring.jackson.default-property-inclusion=non_null

# ===== 🌐 AVIATION WEATHER API 설정 =====
# Aviation Weather Center API 주소
aviation.weather.base-url=https://aviationweather.gov/api/data

# API 호출시 식별용 User-Agent (예의상 포함)
aviation.weather.user-agent=AviationWeatherProducer/1.0 (contact@yourcompany.com)

# API 응답 대기 시간 (30초)
aviation.weather.request-timeout-seconds=30

# API 호출 실패시 재시도 횟수
aviation.weather.retry-attempts=3

# ===== ⏰ 데이터 수집 스케줄 설정 =====
# CRON 표현식: 초(0) 분(*/60) 시(*) 일(*) 월(*) 요일(*)
# METAR: 1시간마다 수집 (공항 기상 데이터)
aviation.weather.schedule.metar-cron=0 */60 * * * *

# PIREP: 10분마다 수집 (조종사 실시간 보고 - 자주 업데이트됨)
aviation.weather.schedule.pirep-cron=0 */10 * * * *

# SIGMET: 10분마다 수집 (기상 경보 - 긴급성 높음)
aviation.weather.schedule.sigmet-cron=0 */10 * * * *

# ===== 🎯 KAFKA 토픽 설정 =====
# 각 데이터 타입별로 다른 토픽으로 전송
aviation.weather.topics.metar=AWC-METAR      # 공항 기상 데이터
aviation.weather.topics.pirep=AWC-PIREP      # 조종사 보고 데이터
aviation.weather.topics.sigmet=AWC-SIGMET    # 기상 경보 데이터

# ===== 🔍 데이터 필터링 설정 =====
# METAR: 최근 2시간 데이터만 수집 (너무 오래된 데이터 제외)
aviation.weather.filters.metar-hours-back=2

# SIGMET: 전 세계 모든 지역의 기상 경보 수집
aviation.weather.filters.hazard-regions[0]=all

# SIGMET: 모든 종류의 위험 기상 현상 수집
aviation.weather.filters.hazard-types[0]=all    # 모든 종류
aviation.weather.filters.hazard-types[1]=conv   # 대류 (뇌우)
aviation.weather.filters.hazard-types[2]=turb   # 난기류
aviation.weather.filters.hazard-types[3]=ice    # 착빙
aviation.weather.filters.hazard-types[4]=mtw    # 산악파
aviation.weather.filters.hazard-types[5]=sand   # 모래폭풍
aviation.weather.filters.hazard-types[6]=trop   # 열대저기압
aviation.weather.filters.hazard-types[7]=ash    # 화산재

# ===== 🔧 HTTP 클라이언트 설정 =====
# 큰 JSON 응답 처리를 위한 메모리 버퍼 크기 (10MB)
# Aviation Weather API는 데이터가 클 수 있음
spring.codec.max-in-memory-size=10MB

# ===== 📝 로깅 설정 =====
# 애플리케이션 로그 레벨 (INFO: 중요한 정보만 출력)
logging.level.com.aviation.weather=INFO

# Kafka 관련 로그는 경고 이상만 (너무 많은 로그 방지)
logging.level.org.apache.kafka=WARN
logging.level.org.springframework.kafka=INFO

# HTTP 요청 디버깅용 (문제 발생시 유용)
logging.level.org.springframework.web.reactive=DEBUG

# 로그 출력 형식 (날짜, 스레드, 레벨, 클래스명, 메시지)
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# 로그 파일 저장 위치
logging.file.name=logs/aviation-weather-producer.log

# ===== 📈 모니터링 설정 (운영시 시스템 상태 확인용) =====
# 모니터링 엔드포인트 활성화
management.endpoints.web.exposure.include=health,info,metrics,prometheus,env,configprops

# 헬스체크 상세 정보 표시
management.endpoint.health.show-details=always

# 성능 지표 수집 활성화
management.endpoint.metrics.enabled=true
management.endpoint.prometheus.enabled=true
management.metrics.export.prometheus.enabled=true

# ===== ℹ️ 애플리케이션 정보 (모니터링 화면에 표시) =====
info.app.name=Aviation Weather Kafka Producer
info.app.description=METAR, PIREP, SIGMET 데이터를 수집하여 카프카로 전송
info.app.version=1.0.0
info.app.developer=Your Company
info.app.contact=contact@yourcompany.com

# =============================================================================
# 🎯 주요 설정 요약:
# - 데이터 수집: METAR(1시간), PIREP(10분), SIGMET(10분) 주기
# - Kafka 토픽: AWC-METAR, AWC-PIREP, AWC-SIGMET
# - 안전장치: 재시도, 중복방지, 타임아웃 설정 완료
# - 모니터링: http://localhost:8080/actuator/health 에서 상태 확인 가능
# =============================================================================